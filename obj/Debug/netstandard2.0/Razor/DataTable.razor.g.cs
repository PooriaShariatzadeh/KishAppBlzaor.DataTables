#pragma checksum "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "463c58f654f48bd9e0b8e8a2d0e64cffbe81eabb"
// <auto-generated/>
#pragma warning disable 1591
namespace KishAppBlazor.DataTables
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\KishAppBlazor\KishAppBlazor.DataTables\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
    public partial class DataTable<TRowData> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __Blazor.KishAppBlazor.DataTables.DataTable.TypeInference.CreateCascadingValue_0(__builder, 0, 1, 
#line 4 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                         true

#line default
#line hidden
            , 2, 
#line 4 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                      this

#line default
#line hidden
            , 3, (__builder2) => {
                __builder2.AddContent(4, 
#line 4 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                             ChildContent

#line default
#line hidden
                );
            }
            );
            __builder.AddMarkupContent(5, "\r\n");
#line 5 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
    if (!String.IsNullOrEmpty(ID))
    {

#line default
#line hidden
            __builder.AddContent(6, "        ");
            __builder.OpenElement(7, "table");
            __builder.AddAttribute(8, "class", 
#line 7 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                       CssClass

#line default
#line hidden
            );
            __builder.AddAttribute(9, "id", 
#line 7 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                      ID

#line default
#line hidden
            );
            __builder.AddMarkupContent(10, "\r\n            ");
            __builder.OpenElement(11, "thead");
            __builder.AddMarkupContent(12, "\r\n                ");
            __builder.OpenElement(13, "tr");
            __builder.AddMarkupContent(14, "\r\n");
#line 10 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                     foreach (var column in columns)
                    {
                        

#line default
#line hidden
            __builder.AddContent(15, 
#line 12 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                         column.HeaderTemplate

#line default
#line hidden
            );
#line 12 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                              
                    }

#line default
#line hidden
            __builder.AddContent(16, "                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(17, "\r\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(18, "\r\n            ");
            __builder.OpenElement(19, "tbody");
            __builder.AddMarkupContent(20, "\r\n");
#line 17 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                  
                    if (Data != null)
                    {
                        foreach (var item in Data)
                        {

#line default
#line hidden
            __builder.AddContent(21, "                            ");
            __builder.OpenElement(22, "tr");
            __builder.SetKey(
#line 22 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                      item.GetHashCode()

#line default
#line hidden
            );
            __builder.AddMarkupContent(23, "\r\n");
#line 23 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                 foreach (var column in columns)
                                {
                                    

#line default
#line hidden
            __builder.AddContent(24, 
#line 25 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                     column.CellTemplate(item)

#line default
#line hidden
            );
#line 25 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                                                              
                                }

#line default
#line hidden
            __builder.AddContent(25, "                            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(26, "\r\n");
#line 28 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
                        }
                    }
                

#line default
#line hidden
            __builder.AddContent(27, "            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(28, "\r\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(29, "\r\n");
#line 33 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
    }

#line default
#line hidden
        }
        #pragma warning restore 1998
#line 36 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
       
    [Parameter]
    public ICollection<TRowData> Data { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private readonly List<DTColumn<TRowData>> columns = new List<DTColumn<TRowData>>();

    private DataTableConfig DTConfig = new DataTableConfig();
    private Dictionary<int, string> order = new Dictionary<int, string>();


    private  int columnIndex=0;

    internal void AddColumn(DTColumn<TRowData> column)
    {
        columns.Add(column);
        ColumnDefs columndef = new ColumnDefs
        {
            targets = columnIndex,
            orderable= column.Orderable,
            width=column.Width,
            visible=column.Visible,
            searchable=column.Searchable,
        };


        DTConfig.columnDefs.Add(columndef);
        if (column.Order!=0) {
            order.Add(columnIndex, column.Order.GetDescription());
        }

        columnIndex++;
    }




    [Parameter]
    public string ID { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public int DelayCount { get; set; } = 10;


    [Parameter]
    public bool Ordering { get ; set; } = true;
    [Parameter]
    public bool Paging { get; set; } = true;
    [Parameter]
    public bool Info { get; set; } = true;


    [Parameter]
    public string Dom { get; set; } = null;

    [Parameter]
    public PagingTypes PagingType { get; set; } = 0;

    [Parameter]
    public bool ColReorder { get; set; } = false;

    [Parameter]
    public bool Responsive { get; set; } = false;

    [Parameter]
    public bool StateSave { get; set; } = false;

    [Parameter]
    public bool ScrollX { get; set; } = false;

    [Parameter]
    public string ScrollY { get; set; } = null;

    [Parameter]
    public bool Keys { get; set; } = false;

    [Parameter]
    public Languages Language { get; set; }


    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(ID))
        {
            ID = Guid.NewGuid().ToString();
        }
        if (String.IsNullOrEmpty(CssClass))
        {
            CssClass = "table";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firestime)
    {
        if (firestime)
        {
            int delay = 0;
            while (delay<=DelayCount)
            {
                if (Data.Count() == 0)
                {
                    await Task.Delay(1000);
                }
                else
                {
                    break;
                }
                delay++;
            }


            DTConfig.pagingType = PagingType != 0 ? PagingType.GetDescription() : null;
            DTConfig.colReorder = ColReorder;
            DTConfig.responsive = Responsive;
            DTConfig.scrollX = ScrollX;
            DTConfig.scrollY = ScrollY;
            DTConfig.keys = Keys;
            DTConfig.ordering = Ordering;
            DTConfig.info = Info;
            DTConfig.paging = Paging;
            DTConfig.order = new object[order.Count()][];
            DTConfig.dom = Dom;
            DTConfig.stateSave = StateSave;
            DTConfig.language = Language != 0 ? new { url = Language.GetDescription() } : null;



            var orderIndex = 0;
            foreach (var item in order)
            {
                DTConfig.order[orderIndex] = new object[2]{ item.Key, item.Value };
                orderIndex++;
            }

            JsInterop.DataTable(jSRuntime, ID, DTConfig);
            StateHasChanged();
        }
    }






#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime jSRuntime { get; set; }
    }
}
namespace __Blazor.KishAppBlazor.DataTables.DataTable
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateCascadingValue_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.Boolean __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.RenderFragment __arg2)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.CascadingValue<TValue>>(seq);
        __builder.AddAttribute(__seq0, "IsFixed", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ChildContent", __arg2);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
