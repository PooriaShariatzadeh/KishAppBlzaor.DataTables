#pragma checksum "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "463c58f654f48bd9e0b8e8a2d0e64cffbe81eabb"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace KishAppBlazor.DataTables
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\KishAppBlazor\KishAppBlazor.DataTables\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
    public partial class DataTable<TRowData> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 36 "D:\KishAppBlazor\KishAppBlazor.DataTables\DataTable.razor"
       
    [Parameter]
    public ICollection<TRowData> Data { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private readonly List<DTColumn<TRowData>> columns = new List<DTColumn<TRowData>>();

    private DataTableConfig DTConfig = new DataTableConfig();
    private Dictionary<int, string> order = new Dictionary<int, string>();


    private  int columnIndex=0;

    internal void AddColumn(DTColumn<TRowData> column)
    {
        columns.Add(column);
        ColumnDefs columndef = new ColumnDefs
        {
            targets = columnIndex,
            orderable= column.Orderable,
            width=column.Width,
            visible=column.Visible,
            searchable=column.Searchable,
        };


        DTConfig.columnDefs.Add(columndef);
        if (column.Order!=0) {
            order.Add(columnIndex, column.Order.GetDescription());
        }

        columnIndex++;
    }




    [Parameter]
    public string ID { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public int DelayCount { get; set; } = 10;


    [Parameter]
    public bool Ordering { get ; set; } = true;
    [Parameter]
    public bool Paging { get; set; } = true;
    [Parameter]
    public bool Info { get; set; } = true;


    [Parameter]
    public string Dom { get; set; } = null;

    [Parameter]
    public PagingTypes PagingType { get; set; } = 0;

    [Parameter]
    public bool ColReorder { get; set; } = false;

    [Parameter]
    public bool Responsive { get; set; } = false;

    [Parameter]
    public bool StateSave { get; set; } = false;

    [Parameter]
    public bool ScrollX { get; set; } = false;

    [Parameter]
    public string ScrollY { get; set; } = null;

    [Parameter]
    public bool Keys { get; set; } = false;

    [Parameter]
    public Languages Language { get; set; }


    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(ID))
        {
            ID = Guid.NewGuid().ToString();
        }
        if (String.IsNullOrEmpty(CssClass))
        {
            CssClass = "table";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firestime)
    {
        if (firestime)
        {
            int delay = 0;
            while (delay<=DelayCount)
            {
                if (Data.Count() == 0)
                {
                    await Task.Delay(1000);
                }
                else
                {
                    break;
                }
                delay++;
            }


            DTConfig.pagingType = PagingType != 0 ? PagingType.GetDescription() : null;
            DTConfig.colReorder = ColReorder;
            DTConfig.responsive = Responsive;
            DTConfig.scrollX = ScrollX;
            DTConfig.scrollY = ScrollY;
            DTConfig.keys = Keys;
            DTConfig.ordering = Ordering;
            DTConfig.info = Info;
            DTConfig.paging = Paging;
            DTConfig.order = new object[order.Count()][];
            DTConfig.dom = Dom;
            DTConfig.stateSave = StateSave;
            DTConfig.language = Language != 0 ? new { url = Language.GetDescription() } : null;



            var orderIndex = 0;
            foreach (var item in order)
            {
                DTConfig.order[orderIndex] = new object[2]{ item.Key, item.Value };
                orderIndex++;
            }

            JsInterop.DataTable(jSRuntime, ID, DTConfig);
            StateHasChanged();
        }
    }






#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime jSRuntime { get; set; }
    }
}
#pragma warning restore 1591
