@typeparam TRowData
@using System.Linq.Expressions
@code {
    [CascadingParameter]
    public DataTable<TRowData> OwnerGrid { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Expression<Func<TRowData, object>> Expression { get; set; }

    [Parameter]
    public string Format { get; set; }
    [Parameter]
    public ColumnOrder Order { get; set; }
    [Parameter]
    public bool Orderable { get; set; } = true;
    [Parameter]
    public bool Visible { get; set; } = true;
    [Parameter]
    public bool Searchable { get; set; } = true;
    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public RenderFragment<TRowData> ChildContent { get; set; }

    private Func<TRowData, object> compiledExpression;
    private Expression lastCompiledExpression;
    private RenderFragment headerTemplate;
    private RenderFragment<TRowData> cellTemplate;



    protected override void OnInitialized()
    {
        OwnerGrid.AddColumn(this);
    }

    protected override void OnParametersSet()
    {
        if (lastCompiledExpression != Expression)
        {
            compiledExpression = Expression?.Compile();
            lastCompiledExpression = Expression;
        }
    }

    internal RenderFragment HeaderTemplate
    {
        get
        {
            return headerTemplate = (builder =>
            {
                builder.OpenElement(0, "th");
                builder.AddContent(1, Title);
                builder.CloseElement();
            });
        }
    }

    internal RenderFragment<TRowData> CellTemplate
    {
        get
        {
            return cellTemplate = (rowData => builder =>
            {
                builder.OpenElement(0, "td");
                if (compiledExpression != null)
                {
                    var value = compiledExpression(rowData);
                    var formattedValue = string.IsNullOrEmpty(Format) ? value?.ToString() : string.Format("{0:" + Format + "}", value);
                    builder.AddContent(1, formattedValue);
                }
                else
                {
                    builder.AddContent(2, ChildContent, rowData);
                }

                builder.CloseElement();
            });
        }
    }

}